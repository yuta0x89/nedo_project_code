# %%
import os
from datetime import datetime
from vllm import SamplingParams, LLM
import json
from src.clean_utils import clean
import random
import sys
from genres import prepare_prompt

args = sys.argv
import time


# job idを取得
# job_id=os.environ['$SLURM_JOB_ID']
job_id = args[1]
flag_file_path = f"flags/{job_id}.txt"

with open(flag_file_path, "w") as f:
    f.write("1")

def load_flag():
    with open(flag_file_path, "r") as f:
        flag = f.read().strip()

    print("flag: ", flag)
    print("flag==1: ", flag == "1")

    return flag == "1"

# %%
out_dir = "0721out_multiturn_gcp"

#for i in range(109):
#    random.seed(int(job_id)+datetime.now().time().microsecond+random.randint(0,10000)+int(job_id))
import os
# 現在のプロセスIDを取得
pid = os.getpid()
random.seed(int(pid))
print("seed:" ,pid)

batch_size=1000
#batch_size=10

os.system(f"mkdir -p {out_dir}")

current_time_no_symbols = datetime.now().strftime(
    "%Y-%m-%d %H:%M:%S").replace("-", "").replace(":", "").replace(" ", "")
out_path = f"{out_dir}/model_{current_time_no_symbols}_{random.randint(0,10000)}.jsonl"



# %%
model_name = "cyberagent/calm3-22b-chat"
#model_name="nitky/Oumuamua-7b-instruct-v2"

#model_name = "hatakeyama-llm-team/Tanuki-8B-Instruct"
llm = LLM(model=model_name, trust_remote_code=True,
          max_model_len=4000,
          # max_model_len=7000,
         #  gpu_memory_utilization=0.9,
          )
import collections

def find_most_common_character(text):
    # 文字の出現回数をカウントする
    character_count = collections.Counter(text)
    # 最も頻出する文字を見つける
    most_common_character, most_common_count = character_count.most_common(1)[0]
    return most_common_character, most_common_count

def check_character_occurrence(text, threshold):
    # 最も多く出現する文字とその回数を取得する
    most_common_character, most_common_count = find_most_common_character(text)
    # 閾値と比較する
    if most_common_count >= threshold:
        return True
    else:
        return False

def clean(a):
    try:
        if check_character_occurrence(a, threshold=40):
            return ""
    except:
        return ""
    return a

def llm_gen(llm,prompt_list):

    outputs = llm.generate(
        prompt_list,
        sampling_params=SamplingParams(
            temperature=0.7,
            max_tokens=1024,
            repetition_penalty=1.2,
            top_k=50,
        )
    )
    return [i.outputs[0].text.strip() for i in outputs]


# %%


def question_to_prompt(question):
    #calm
    if model_name=="cyberagent/calm3-22b-chat":
        return f"""<|im_start|>user
{question}<|im_end|>
<|im_start|>assistant"""
    #mistral etc
    else:
        return f"""[INST]<<SYS>>あなたは誠実で優秀な日本人のアシスタントです。 
<</SYS>>
{question}[/INST]"""


response_inst_text="""
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､正確性に疑問を呈する反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､信頼性に疑問を呈する反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､強い反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､ロジカルな反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､感情的な反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､見落としていた点を突く反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､核心突く反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､反論を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､賛成意見と疑問を生成しなさい､
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､内容を深く掘り下げる､追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答に反対する旨の､追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答に賛成する旨の､追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答に疑問を呈する旨の､追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､話題を変えたい旨の､追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答の信頼性を再確認する旨の追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､さらなる関連情報を求める追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､異なる視点からの追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､実践的な応用についての追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､具体的な例を求める追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､データや統計を求める追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､関連する最新の研究やニュースを求める追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答の前提を確認する追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答の影響を考慮する追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答の長所を強調する追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､回答の短所を指摘する追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､将来的な展望についての追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､異なる分野への応用可能性についての追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､倫理的な観点からの追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､具体的な手順や方法を詳細に求める追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､他の研究や意見と比較する追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､理論的な基盤を確認する追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､具体的な成功事例を求める追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､失敗事例やリスクについての追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､関連する実験結果を求める追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､社会的な影響についての追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､環境への影響を考慮する追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､費用対効果についての追加の質問や反論を1つ生成しなさい
あなたはディベートをしています｡以下のやりとりをもとに､過去の発言を参照しながら､トレンドや未来予測についての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､要点を求める質問を生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､要点を箇条書きで求める質問を生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､内容を深く掘り下げる､追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答に反対する旨の､追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答に賛成する旨の､追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答に疑問を呈する旨の､追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､話題を変えたい旨の､追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答の信頼性を再確認する旨の追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､さらなる関連情報を求める追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､異なる視点からの追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､実践的な応用についての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､具体的な例を求める追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､データや統計を求める追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､関連する最新の研究やニュースを求める追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答の前提を確認する追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答の影響を考慮する追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答の長所を強調する追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､回答の短所を指摘する追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､将来的な展望についての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､異なる分野への応用可能性についての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､倫理的な観点からの追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､具体的な手順や方法を詳細に求める追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､他の研究や意見と比較する追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､理論的な基盤を確認する追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､具体的な成功事例を求める追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､失敗事例やリスクについての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､関連する実験結果を求める追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､社会的な影響についての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､環境への影響を考慮する追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､費用対効果についての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を参照しながら､トレンドや未来予測についての追加の質問や反論を1つ生成しなさい
以下のやりとりをもとに､過去の発言を要約して再生成させる指示を一つ生成しなさい｡
以下のやりとりをもとに､過去の発言をJSONで要約して再生成させる指示を一つ生成しなさい｡
以下のやりとりをもとに､過去の発言をYAMLで要約して再生成させる指示を一つ生成しなさい｡
以下のやりとりをもとに､過去の発言を箇条書きで要約して再生成させる指示を一つ生成しなさい｡
以下のやりとりをもとに､過去の発言のデータ解析を求める指示を一つ生成しなさい｡
以下のやりとりをもとに､当初の前提を変えて出力を再生成させる指示を一つ生成しなさい｡
以下のやりとりをもとに､当初の前提を一部変えて出力を再生成させる指示を一つ生成しなさい｡
以下のやりとりをもとに､当初の前提を大幅に変えて出力を再生成させる指示を一つ生成しなさい｡
以下のやり取りをもとに、次のような例の指示を出しなさい「主語を「彼」に書き換えなさい」
以下のやり取りをもとに、次のような例の指示を出しなさい「「それから」で始まる文章にしなさい」
以下のやり取りをもとに、次のような例の指示を出しなさい「「彼女」に主語を変更し、文章を書き換えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「「まず最初に」で始まる文章に変更しなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「問題」、「方法」、「解決策」の3つのセクションに分割し、箇条書きにしなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章中の「が」の数を数えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「ニュース」、「物語」、「説明」のジャンルに分け、それぞれに適したスタイルで書き換えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を100文字以内の短い要約にまとめなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「「～した後で」という形式で文章を書き換えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「質問」と「回答」の形式に変換しなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章中の「の」の数を数え、それを半減させるように書き換えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章中の「は」の数を数え、それを半減させるように書き換えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章中の「が」の数を数え、それを半減させるように書き換えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章中の「数字」の数を数え、それを半減させるように書き換えなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「現在形」から「過去形」に変更しなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「肯定形」から「否定形」に変更しなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「直接話法」から「間接話法」に変更しなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「第一人称」から「第三人称」に変更しなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章を「能動態」から「受動態」に変更しなさい。」
以下のやり取りをもとに、次のような例の指示を出しなさい「3つのポイントで箇条書きにしなさい」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章に「は」がいくつ含まれるかをカウントしなさい」
以下のやり取りをもとに、次のような例の指示を出しなさい「ジャンルごとに分けて、文章を再生成しなさい」
以下のやり取りをもとに、次のような例の指示を出しなさい「150文字で要約しなさい」
以下のやり取りをもとに、次のような例の指示を出しなさい「命令文を「お願いします」を含む丁寧な表現に変更してください。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「未来時制を用いて文章を書き換えてください。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「仮定法を用いた条件文へと変更してください。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「比喩や隠喩を用いて抽象度の高い表現へ変えてください。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「文章の長さを倍に増やしてください。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「感動詞を追加して感情豊かな表現にしてください。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「擬音或いは擬声詞を使用して具体的な形象を与えるよう修正をして下さい。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「敬語を用いることで尊大な印象にする様に加工をお願い致します。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「指定したキーワードを含めて改稿を実施する事を依頼申し上げます。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「指定された読点および句点をすべて削除し文章を作り直す様にご尽力頂きたく存じます。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「一人称複数または三人称複数の視点から見た内容となるよう改ざんを行っていただきたいと考えておりますのでどうぞよろしくお願いいたします。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「漫画チックな表現を用いてコミカルかつ大げさな印象を与える様にご対応下さいませ！ 」
以下のやり取りをもとに、次のような例の指示を出しなさい「「～である」という書き方ではなく、「～だ」、「～です」などの口語的なスタイルで再構成をお願いします。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「二重否定文になるように修正を行ってください。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「肯定形と否定形が交互に出現する様にパラグラフを書き換えて下さい。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「修辞疑問文を用いて変更していただきたいと存じますので何卒よろしくお願い申し上げます。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「反語的表現を使用し、皮肉やユーモアのあるニュアンスに改変してくださいませ！ 」
以下のやり取りをもとに、次のような例の指示を出しなさい「段落ごとに異なる分野に関連付け、多様な知識背景を持つ読者にアピールできる内容へと改善することを提案致しますのでどうぞよろしくお願いいたします。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「専門用語を活用しつつも一般人にも分かりやすい言葉で説明をするような記述方法を採用頂きたく存じます。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「一定のリズムや韻律のある散文体を目指した改訂を行うべきと考えられます故、一旦終わりまで練り直しをお願申し上げたく候也。 」
以下のやり取りをもとに、次のような例の指示を出しなさい「感情移入しやすいよう、「あなた」という一人称で綴る様な様式にてお願いしたい所存です故どうぞよろしく願い奉り候也。」
以下のやり取りをもとに、次のような例の指示を出しなさい「指示されたトピックに関する事実だけでなく関連性あるエピソード等を含めることでより豊かなコンテンツとする事が必要不可欠と考えられますゆえ何卒宜しくお願い致します。」
"""
response_inst_list=response_inst_text.strip().split("\n")
response_inst_text=[i.strip() for i in response_inst_list if i.strip()!=""]


ans_style_text="""
あなたは誠実なアシスタントです｡次の質問に回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは誠実なアシスタントです｡次の質問に端的に回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは誠実なアシスタントです｡次の質問に丁寧に回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは誠実なアシスタントです｡次の質問にステップバイステップで回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは詳細に注目するアシスタントです。次の質問にデータに基づいて回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは専門的なアシスタントです。次の質問に専門的知識を用いて回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは応答性の高いアシスタントです。次の質問に迅速に回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは教育的なアシスタントです。次の質問に教育的観点から回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは多角的なアシスタントです。次の質問に複数の視点から回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
あなたは戦略的なアシスタントです。次の質問に戦略的アプローチで回答しなさい｡与えられた指示はきちんと守り､既にやり取りがなされている場合は､その内容もきちんと踏まえた解答を生成すること｡
"""
ans_style_list=ans_style_text.strip().split("\n")
ans_style_list=[i.strip() for i in ans_style_list if i.strip()!=""]

def filter_record_list(record_list,final_check=False):
    filtered=[]
    for record in record_list:
        reject_flag=False
        for key in record:
            if key=="id":
                continue
            if record[key]=="":
                reject_flag=True
                break
            if final_check:
                if record[key] is None:
                    reject_flag=True
                elif len(record[key])<10:
                    reject_flag=True
        if reject_flag:
            continue
        filtered.append(record)
    return filtered


# %%
while True:
    flag = load_flag()
    if flag:
        print("flag is true. continue processing")
    else:
        print("flag!=1. finish data processing ")
        break
 
    # %%

    record_list=[]

    for i in range(batch_size):
        d={
        "id":i,
        "q1":".",
        "a1":".",
        "q2":".",
        "a2":".",
        }
        record_list.append(d)

    prompt_list=[]

    random.seed(int(pid)+datetime.now().microsecond)
    #print("seed:",seed)
 
    #種instのランダムキーワード
    for i in range(batch_size):
        seed=random.randint(0,1000000000)
        inst,_=prepare_prompt(seed)
        prompt= question_to_prompt(f"{inst}")
        prompt_list.append(prompt)

    #質問1の生成
    first_instruction_list=llm_gen(llm,prompt_list)
    for i,question in enumerate(first_instruction_list):
        q=clean(question)
        record_list[i]["q1"]=q


    record_list=filter_record_list(record_list)
    first_instruction_list=[record["q1"] for record in record_list]
    prompt_list=[random.choice(ans_style_list)+f"{question}" for question in first_instruction_list]

    #回答1の生成
    first_answer_list=llm_gen(llm,prompt_list)
    for i,answer in enumerate(first_answer_list):
        answer=clean(answer)
        record_list[i]["a1"]=answer
    record_list=filter_record_list(record_list)


    #質問2の生成
    prompt_list=[]
    for record in record_list:
        inst=random.choice(response_inst_list)
        q1=record["q1"]
        a1=record["a1"]
        question=f"{inst}｡質問のみを出力し､それ以外はなにも出力しないこと｡\nQ.{q1}\nA.{a1}"
        prompt_list.append(question_to_prompt(question))

    second_instruction_list=llm_gen(llm,prompt_list)

    for i,inst in enumerate(second_instruction_list):
        record_list[i]["q2"]=clean(inst)
    record_list=filter_record_list(record_list)

    #回答2の生成
    prompt_list=[]
    for record in record_list:
        q2=record["q2"]
        prompt_list.append(question_to_prompt(f"これまでの経緯:Q.{q1}\nA.{a1}\n今回の質問:Q.{q2}\nA."))
    second_answer_list=llm_gen(llm,prompt_list)

    for i,inst in enumerate(second_answer_list):
        record_list[i]["a2"]=clean(inst)
    record_list=filter_record_list(record_list,final_check=True)

    for record in record_list:
        record.pop("id")
        record["text"]=f"user: {record['q1']}\nassistant: {record['a1']}\nuser: {record['q2']}\nassistant: {record['a2']}"
        record["model_name"]=model_name

    # %%
    for record in record_list:
        with open(out_path, "a") as f:
            f.write(json.dumps(record, ensure_ascii=False) + "\n")
                                                                                               