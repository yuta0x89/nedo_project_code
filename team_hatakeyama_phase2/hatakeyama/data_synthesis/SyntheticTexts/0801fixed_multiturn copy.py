# %%
# %%
import time
import os
from datetime import datetime
from vllm import SamplingParams, LLM
import json
import random
from genre_list import genre_list
import re
import sys
args = sys.argv
job_id = args[1]
flag_file_path = f"flags/{job_id}.txt"
def load_flag():
    with open(flag_file_path, "r") as f:
        flag = f.read().strip()

    print("flag: ", flag)
    print("flag==1: ", flag == "1")

    return flag == "1"



with open(flag_file_path, "w") as f:
    f.write("1")
"""
export CUDA_VISIBLE_DEVICES=0
conda activate llmeval
nohup python 0801fixed_multiturn.py  &

export CUDA_VISIBLE_DEVICES=0
nohup python 0801fixed_multiturn.py &

export CUDA_VISIBLE_DEVICES=1
nohup python 0801fixed_multiturn.py &

export CUDA_VISIBLE_DEVICES=2
nohup python 0801fixed_multiturn.py &

export CUDA_VISIBLE_DEVICES=3
nohup python 0801fixed_multiturn.py &

export CUDA_VISIBLE_DEVICES=4
nohup python 0801fixed_multiturn.py &

export CUDA_VISIBLE_DEVICES=5
nohup python 0801fixed_multiturn.py &

export CUDA_VISIBLE_DEVICES=6
nohup python 0801fixed_multiturn.py &

export CUDA_VISIBLE_DEVICES=7
nohup python 0801fixed_multiturn.py &

"""


def get_longest_phrase_length(text):
    # 区切り文字として、スペース、カンマ、句読点、改行を指定
    delimiters = r'[ ,。！？、\n]'
    # テキストを区切り文字で分割
    try:
        phrases = re.split(delimiters, text)
        # 最大のフレーズの長さを取得
        max_length = max(len(phrase) for phrase in phrases)
    except:
        max_length = 9999
    return max_length


def is_abnormal_text(text, threshold=40):
    words = text.split()
    word_count = len(words)
    # 複数の区切り文字をカウント
    period_count = text.count('.') + text.count(',') + \
        text.count('､') + text.count('｡')
    ratio = word_count / period_count if period_count > 0 else word_count
    return ratio > threshold


n_turns = 2
batch_size = 50
out_dir = "0803out_logical_fixed"
# out_dir = "0724multiturn_oum"

pid = os.getpid()
seed = int(pid)+int(datetime.now().timestamp())
print("seed: ", seed)
random.seed(seed)


os.system(f"mkdir -p {out_dir}")

current_time_no_symbols = datetime.now().strftime(
    "%Y-%m-%d %H:%M:%S").replace("-", "").replace(":", "").replace(" ", "")
out_path = f"{out_dir}/model_{current_time_no_symbols}_{random.randint(0,10000)}.jsonl"


# %%

model_name = "cyberagent/calm3-22b-chat"
tensor_parallel_size = 1
llm = LLM(model=model_name, trust_remote_code=True,
          max_model_len=4000,
          # max_model_len=7000,
          #  gpu_memory_utilization=0.9,
          tensor_parallel_size=tensor_parallel_size,
          )


def llm_gen(llm, prompt_list, temperature=0.7, top_k=50):

    outputs = llm.generate(
        prompt_list,
        sampling_params=SamplingParams(
            temperature=temperature,
            max_tokens=1024,
            repetition_penalty=1.2,
            top_k=top_k,
        )
    )
    return [i.outputs[0].text.strip() for i in outputs]


# %%
def question_to_prompt(question, role, history=[]):
    prompt = f"""<|im_start|>system
{role}
<|im_end|>"""

    if len(history) > 0:
        for q, a in history:
            prompt += f"""<|im_start|>user
{q}<|im_end|>
<|im_start|>assistant
{a}<|im_end|>"""
    prompt += f"""<|im_start|>user
{question}<|im_end|>
<|im_start|>assistant"""
    return prompt


# %%
jobs = """会社員
公務員
自営業
医師
看護師
エンジニア
デザイナー
教師
販売員
サービス業
農業従事者
漁業従事者
建設業従事者
製造業従事者
運送業従事者
金融業従事者
保険業従事者
不動産業従事者
IT関連業従事者
コンサルタント
作家
アーティスト
ミュージシャン
俳優
タレント
スポーツ選手
研究者
学生
主婦/主夫
無職
"""
job_list = jobs.split("\n")
job_list = [i for i in job_list if i != ""]

character_text = """感情的知性が高い
責任感が強い
創造的である
同情的である
好奇心が強い
優れたコミュニケーション能力を持つ
論理的思考ができる
適応能力が高い
勤勉である
強い倫理観を持つ
協力的である
細部にまで注意を払う
問題解決能力が高い
楽観的である
情熱的である
適度な自信を持つ
誠実である
客観的である
オープンマインドである
ユーモアのセンスがある
粘り強い
文化的敏感性を持つ
忍耐強い
積極的である
革新的な考え方をする
リーダーシップの素質を持つ
巻き返す能力がある
多様性を尊重する
チームプレーヤーである
謙虚である
規律性がある
迅速な対応ができる
良心的な判断をする
気配りができる
他人への敬意を払う
楽観的な見通しを持つ
自制心がある
信頼に足る
機転が利く
分析的である
積極的に学ぶ姿勢を持つ
親切である
献身的である
思いやりがある
積極的である
仕事への熱意がある
創造性に富む
熱心である
尊敬に値する
倫理観が高い
革新的なアイディアを出す
戦略的思考ができる
思いやりのある
洞察力がある
尊大な態度がない
情熱的である
積極的な姿勢を持つ
細かい配慮ができる
信頼できる
社交的である
独立心がある
常に向上心を持つ
率先して行動する
強い意志を持つ
決断力がある
思いやりの心を持つ
積極的に問題解決にあたる
創造的なアイディアを提案する
積極的に知識を習得する
親しみやすい
積極的にコミュニケーションを取る
率先して課題に取り組む
積極的に新しいことに挑戦する
強いリーダーシップを発揮する
常に学ぶ姿勢を忘れない
積極的にチームに貢献する
細かいところにも気を配る
積極的に意見を述べる
積極的に課題解決にあたる
積極的に新しいスキルを習得する
積極的にチームワークを発揮する
積極的に問題解決に挑む
積極的に新しいアイディアを出す
積極的に新しいチャレンジをする
強い責任感を持つ
細かいところにも気を配る
積極的に新しい技術を学ぶ
積極的に新しい環境に適応する
強い意志を持って物事に取り組む
積極的に新しい経験をする
荒々しい
性格の悪い
細かい
気難しい
"""
character_list = character_text.split("\n")
character_list = [i for i in character_list if i != ""]

response_text = """
あなたの応答を、4つの形容詞を使って、「結果として、」で締めてください。
あなたの応答を、4つの形容詞を使って、「結局のところ、」で締めてください。
あなたの応答を、4つの形容詞を使って、「最後に、」で締めてください。
あなたの応答を、4つの形容詞を使って、「要するに、」で締めくくってください。
あなたの応答を、定性的な観察に基づいて評価し、5つのデータポイントでJSON形式で書き出してください（単語のはじめは常に大文字にしてください）。
あなたの応答を、定性的な観察に基づいて評価し、5つのデータポイントでJSON形式で書き出してください。
あなたの応答を、定性的な観察に基づいて評価し、JSON形式で書き出してください。
あなたの応答を、定性的な観察に基づいて評価してください。
あなたの応答を、定性的な観点から解釈し、5つの要素でYAML形式で書き出してください（全て小文字で書いてください）。
あなたの応答を、定性的な観点から解釈し、5つの要素でYAML形式で書き出してください。
あなたの応答を、定性的な観点から解釈し、YAML形式で書き出してください。
あなたの応答を、定性的な視点から見直し、3つの項目で箇条書きでまとめてください（全て大文字で書いてください）。
あなたの応答を、定性的な視点から見直し、3つの項目で箇条書きでまとめてください。
あなたの応答を、定性的な分析に変えて、3つのポイントでJSON形式で書き出してください（単語のはじめは常に大文字にしてください）。
あなたの応答を、定性的な分析に変えて、3つのポイントでJSON形式で書き出してください。
あなたの応答を、定性的な分析に変えて、JSON形式で書き出してください。
あなたの応答を「たとえば、」で始めて、250文字以内で物語的な表現を用いてください。
あなたの応答を「とはいえ、」で始めて、150文字以内で比較を使って説明してください。
あなたの応答を「もう一つの見方は、」で始めて、300文字以内でアナロジーを用いてください。
あなたの応答を定性的な観点から分析し、YAML形式で5つの要素に書き出してください（全て小文字で書いてください）。
あなたの応答を定性的に評価し、3つのポイントでJSON形式で書き出してください（単語のはじめは常に大文字にしてください）。
あなたの応答を批判的な視点から見直し、3つの項目に箇条書きでまとめてください（全て大文字で書いてください）。
あなたの応答を批判的な視点から評価し、5つのデータポイントでJSON形式で書き出してください（単語のはじめは常に大文字にしてください）。
あなたの回答に、3つの名詞を含めて、「それでは、」で始めてください。
あなたの回答に「一言で言えば、」というフレーズを挿入し、150文字以内で説明してください。
あなたの回答の一部を、「驚きの感情を込めた言い回し」に変えてください。
あなたの回答を、2つの隠喩を使って、「とはいえ、」で始めてください。
あなたの回答を、2つの隠喩を使って、「結論としては、」で締めてください。
あなたの回答を、2つの比喩を使って、「この点を考慮して、」で始めてください。
あなたの回答を、2つの比喩を使って、「一言で言えば、」で締めくくってください。
あなたの回答を、2つの比喩を使って、「次に、」で始めてください。
あなたの回答を、箇条書き形式で定量的な評価に書き換えてください。
あなたの回答を、感想や意見を交えて定性的に評価し、4つの要素でYAML形式で整理してください。
あなたの回答を、感想や意見を交えて定性的に評価し、YAML形式で整理してください。
あなたの回答を、定性的なフィードバックに書き換えて、2つの部分でJSON形式で出力してください（単語のはじめは常に大文字にしてください）。
あなたの回答を、定性的なフィードバックに書き換えて、2つの部分でJSON形式で出力してください。
あなたの回答を、定性的なフィードバックに書き換えて、JSON形式で出力してください。
あなたの回答を、定性的な感想に変更し、2つの項目で箇条書きで整理してください。
あなたの回答を、定性的な感想に変更し、箇条書きで整理してください。
あなたの回答を、定性的な表現に変更し、4つの項目で箇条書きにしてください。
あなたの回答を、定性的な表現に変更し、箇条書きで整理してください。
あなたの回答を、定性的な評価に置き換えて、6つの要素でYAML形式で整理してください。
あなたの回答を、定性的な評価に置き換えて、YAML形式で整理してください。
あなたの回答を、定量的な評価に書き換えて、3つの項目に箇条書きしてください。
あなたの先ほどの回答を「か」で始まる文章に変えてください。
あなたの先ほどの回答を「も」で始まる文にしてください。
あなたの先ほどの答えを「ふ」で始める文に変えてください。
あなたの前の回答を「ね」で始めるように書き直してください。
あなたの前の答えを「な」で始めてください。
あなたの直前の応答を「し」で始まる文にリライトしてください。
あなたの直前の答えを「せ」で始まる文にリライトしてください。
より印象的に伝えるために、別の表現方法を考えてみてください。
より印象的に伝えるために、別の表現方法を考えてみよう。
より効果的な表現方法を考えて、より伝わりやすく言い換えてみてください。
より分かりやすく伝えるために、別の表現方法を試してみてください。
リーダブルなスタイルで、読みやすく整理してみてください。
主語を省略してみてください。
主語を「人々」にしてください。
主語を「誰か」にしてみてください。
受動態を避けて、能動態にしてください。
丁寧な言葉遣いで書いてください。
感情を込めた表現にしてみてください。
主語を「私たち」にしてください。
主語を「君」にしてください。
主語を「彼ら」にしてください。
主語を「彼女たち」にしてください。
主語を「それ」にしてください。
主語を「もの」にしてください。
主語を「あなたたち」にしてください。
主語を「我々」にしてください。
主語を「人々」にしてください。
受動態を能動態にしてください。
敬語を使ってください。
主観的な表現にしてください。
客観的な表現にしてください。
肯定的な表現にしてください。
否定的な表現にしてください。
率直な言葉遣いにしてください。
遠回しな言い方にしてください。
「です・ます」調にしてください。
「である」調にしてください。
簡潔に要点をまとめてください。
具体例を使って説明してください。
リーダビリティを向上させるために箇条書きにしてください。
直前の回答を3つの名詞で表現してください。
3つの動詞を使って直前の回答を説明してください。
直前の答えを2つの形容詞で表現してください。
5つの名詞を使って直前の回答を要約してください。
4つの動詞で直前の回答を説明してください。
直前の回答を1つの名詞にまとめてください。
直前の回答を2つの副詞で説明してください。
直前の回答を3つの形容詞で要約してください。
直前の答えを5つの名詞で表現してください。
2つの名詞で直前の回答を要約してください。
2つの形容詞で直前の回答を説明してください。
直前の答えを1つの形容詞で表現してください。
5つの動詞を使って直前の回答を説明してください。
直前の回答を4つの形容詞で説明してください。
直前の答えを2つの名詞で要約してください。
3つの形容詞で直前の回答を表現してください。
4つの名詞を使って直前の答えを要約してください。
5つの名詞で直前の答えを説明してください。
直前の答えを2つの動詞で説明してください。
3つの副詞を使って直前の答えを要約してください。
先ほどの答えを、具体的な数値を挙げて定量的に説明し、4つの項目で箇条書きで示してください。
先ほどの答えを、具体的な数値を挙げて定量的に説明し、箇条書きで示してください。
先ほどの答えを、具体的な数値を挙げて定量的に説明してください。
先ほどの答えを、定性的な評価に変えて、YAML形式で2つの要素に分けて出力してください。
先ほどの答えを、定性的な評価に変えて、YAML形式で出力してください。
先ほどの答えを、定性的な評価に変えて説明してください。
先ほどの答えを、定量的なデータを含めて、YAML形式で6つのセクションに分けて説明してください。
先ほどの答えを、定量的なデータを含めて、YAML形式で説明してください。
先ほどの答えを、定量的なデータを含めて説明してください。
先ほどの答えを、定量的な結果を用いて、5つのデータポイントでJSON形式で説明してください。
先ほどの答えを、定量的な結果を用いて、JSON形式で説明してください。
先ほどの答えを、定量的な結果を用いて説明してください。
先ほどの答えを、定量的な証拠を用いて強化し、4つのセクションでYAML形式で出力してください。
先ほどの答えを、定量的な証拠を用いて強化し、YAML形式で出力してください。
先ほどの答えを、定量的な証拠を用いて強化してください。
先ほどの答えを「ここで重要なのは、」で始めて、250文字以内で感情的な表現を使ってください。
先ほどの答えを「このように、」で締めくくり、100文字以内で要約してください。
先ほどの答えを「まず、」で始めて、100文字以内で簡潔に説明してください。
先ほどの答えを「結果として、」で始めて、200文字以内で具体例を含めて説明してください。
先ほどの答えを「例えば、」で始めて、比喩を使って説明してください。
前回の応答を、「過去形」で表現してください。
前回の応答を、「事実の引用から始める」ように書き直してください。
前回の応答を、「第三者の立場からの視点」に変えてみてください。
前回の応答を、箇条書き形式で「例えば、」で始めて説明してください。
前回の応答を、具体的な数値を使って定量的に評価し、5つの項目でJSON形式で示してください（単語のはじめは常に大文字にしてください）。
前回の応答を、具体的な数値を使って定量的に評価し、5つの項目でJSON形式で示してください。
前回の応答を、具体的な数値を使って定量的に評価し、JSON形式で示してください。
前回の応答を、具体的な数値を使って定量的に評価してください。
前回の応答を「つまり、」で締めくくり、感情的な表現を加えてください。
前回の応答を具体的な数値で定量的に評価し、5つの項目にまとめてJSON形式で示してください（単語のはじめは常に大文字にしてください）。
前回の答えを、数値データに基づいて定量的に評価し、3つのポイントでJSON形式で示してください（単語のはじめは常に大文字にしてください）。
前回の答えを、数値データに基づいて定量的に評価し、3つのポイントでJSON形式で示してください。
前回の答えを、数値で具体的に表現する定量的な評価にし、2つの項目で箇条書きにしてください（全て大文字で書いてください）。
前回の答えを、数値で具体的に表現する定量的な評価にし、2つの項目で箇条書きにしてください。
前回の答えを、数値や統計を使用して定量的に評価し、6つのセクションでYAML形式で記述してください（全て小文字で書いてください）。
前回の答えを、数値や統計を使用して定量的に評価し、6つのセクションでYAML形式で記述してください。
前回の答えを、定量的なメトリクスを使用して説明し、3つの項目で箇条書きで示してください（全て大文字で書いてください）。
前回の答えを、定量的なメトリクスを使用して説明し、3つの項目で箇条書きで示してください。
「この結果を踏まえて、」で始めて、2つの定量的なデータを使って評価をしてください。
「振り返りとして、」で始めて、3つの要因を分析し、修正の提案をしてください。
「もう一度見直してみると、」で始めて、2つの定量的なエビデンスを用いて評価してください。
「この分析において、」で始めて、2つの定性的な要素を挙げて評価してください。
「反省点として、」で始めて、具体的な改善策を3つ提案してください。
「次のステップとして、」で始めて、問題点の解決策を定量的に示してください。
要点を箇条書きでまとめ、それぞれについて1行で補足説明を追加してください。
ポイントを箇条書きで整理し、それぞれに1行で要約を加えてください。
項目を箇条書きで示し、それぞれについて1行で主要な情報を補足してください。
主要なポイントを箇条書きで挙げ、それぞれについて1行で説明をしてください。
次の点を箇条書きで列挙し、それぞれに1行で補足情報を提供してください。
概要を箇条書きでまとめ、それぞれについて1行で要点を述べてください。
要素を箇条書きで列挙し、それぞれについて1行で要約を加えてください。
項目を取り上げて箇条書きでリストアップし、それぞれに1行で要点を記述してください。
事項を箇条書きで整理し、それぞれについて1行で補足説明を加えてください。
観点から箇条書きで述べ、それぞれに1行で補足情報を提供してください。
事項を考慮して箇条書きでリストアップし、それぞれに1行の説明を加えてください。
観点を踏まえて箇条書きで示し、それぞれについて1行で要点をまとめてください。
ポイントを箇条書きで列挙し、それぞれについて1行の詳細を追加してください。
要素を箇条書きで整理し、それぞれについて1行で簡潔に説明してください。
内容を箇条書きで列挙し、それぞれに1行で要点を記述してください。
各要素を1から5までのスケールで評価し、箇条書きでその結果を示してください。
各要素を5段階の評価スケールで評価し、JSON形式で結果をまとめてください。
1から5の評価スケールを使用して各要素を評価し、YAML形式で結果を出力してください。
各要素を1から5の範囲で評価し、評価結果を箇条書きでリストアップしてください。
評価スケールを使用して、各要素を1から5までで評価し、その結果をJSON形式で示してください。
各要素を5段階で評価し、YAML形式で詳細を記載してください。
1-5の評価基準に基づいて各要素を評価し、その結果を箇条書きで示してください。
各要素を1から5までのスケールで評価し、その評価をJSON形式で整理してください。
各要素を5段階で評価し、YAML形式で結果を一覧にしてください。
1から5の範囲で各要素を評価し、その評価結果を箇条書きで示してください。
5段階の評価スケールを使用して各要素を評価し、その結果をJSON形式で出力してください。
各要素を1-5のスケールで評価し、その結果をYAML形式でまとめてください。
各要素を1から5のスコアで評価し、評価結果を箇条書きでリスト化してください。
1-5の評価スケールに基づいて各要素を評価し、JSON形式で結果を示してください。
各要素を5段階で評価し、その評価結果をYAML形式で記録してください。
各要素を1から10までのスケールで評価し、箇条書きで結果を示してください。
3段階の評価スケールを使用して各要素を評価し、JSON形式で結果をまとめてください。
1から7の評価スケールで各要素を評価し、YAML形式で結果を出力してください。
各要素を1から4の範囲で評価し、評価結果を箇条書きでリストアップしてください。
10段階の評価スケールを使用して各要素を評価し、その結果をJSON形式で示してください。
各要素を1から6のスケールで評価し、YAML形式で詳細を記載してください。
3段階の評価基準に基づいて各要素を評価し、その結果を箇条書きで示してください。
各要素を1から9までのスケールで評価し、その評価をJSON形式で整理してください。
各要素を7段階で評価し、YAML形式で結果を一覧にしてください。
1から8の範囲で各要素を評価し、その評価結果を箇条書きで示してください。
6段階の評価スケールを使用して各要素を評価し、その結果をJSON形式で出力してください。
各要素を1-10のスケールで評価し、その結果をYAML形式でまとめてください。
各要素を1から5のスコアで評価し、評価結果を箇条書きでリスト化してください。
1-7の評価スケールに基づいて各要素を評価し、JSON形式で結果を示してください。
各要素を4段階で評価し、その評価結果をYAML形式で記録してください。
回答の理由を3つ挙げ、それぞれについて簡単に説明してください。
YAML形式で、回答の理由を3つ挙げて説明してください｡
JSON形式で、回答の理由を3つ挙げて説明してください｡
YAML形式で、回答の反論を3つ挙げて説明してください｡
JSON形式で、回答の反論を3つ挙げて説明してください｡
「あ」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「い」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「う」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「え」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「お」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「か」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「き」で始まる文にして、回答の理由を3つ挙げて説明してください｡  
「く」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「け」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「こ」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「さ」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「し」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「す」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「せ」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「そ」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「た」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「ち」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「つ」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「て」で始まる文にして、回答の理由を3つ挙げて説明してください｡
「と」で始まる文にして、回答の理由を3つ挙げて説明してください｡
"""

response_list = response_text.split("\n")
response_list = [i for i in response_list if i != ""]

# %%


while True:
    seed = int(pid)+int(datetime.now().timestamp())
    print("seed: ", seed)
    random.seed(seed)
    parallel_conversations = [{"qid": i, "conversations": []}
                              for i in range(batch_size)]
    for turn_id in range(n_turns):
        flag = load_flag()
        if flag:
            print("flag is true. continue processing")
        else:
            print("flag!=1. finish data processing ")
            raise ValueError("finish!")
    
        print("turn_id", turn_id)
        # はじめのターンはランダムな質問
        if turn_id == 0:
            prompt_list = []
            for qid in range(len(parallel_conversations)):
                job = random.choice(job_list)
                character = random.choice(character_list)
                role = f"あなたは{job}です。{character}性格です。"
                genre = random.choice(genre_list)+","+random.choice(genre_list)
                command = f"{genre}に関する指示や質問を一つだけしてください。質問や指示のみを出力し､それ以外は何も含めないこと"
                prompt_list.append(question_to_prompt(command, role))
            print(prompt_list[:3])
            question_list = llm_gen(llm, prompt_list)
        else:
            # 2ターン目では固定された質問を使う
            question_list = random.sample(response_list, batch_size)

        # 解答する
        prompt_list = []
        for qid in range(len(parallel_conversations)):
            character = random.choice(character_list)
            role = f"あなたはアシスタントです。{character}性格です。"
            command = f"次の質問に日本語で回答しなさい｡"
            prompt_list.append(question_to_prompt(
                question_list[qid], role, parallel_conversations[qid]["conversations"]))
        answer_list = llm_gen(llm, prompt_list, temperature=0.01, top_k=1)

        for qid in range(len(parallel_conversations)):
            parallel_conversations[qid]["conversations"].append(
                (question_list[qid], answer_list[qid]))

    # 書き出し
    for record in parallel_conversations:
        conversation_list = []
        text = ""
        remove_flag = False
        for q, a in record["conversations"]:

            # 長すぎるものは削除(壊れた出力)
            if get_longest_phrase_length(q) > 100 or get_longest_phrase_length(a) > 100:
                remove_flag = True
                break
            if is_abnormal_text(q) or is_abnormal_text(a):
                remove_flag = True
                break

            text += f"""user: {q} assistant: {a}\n"""
            # conversation_list.append({"role":"user","content":q})
            # conversation_list.append({"role":"assistant","content":q})
        text = text.strip()
        record["text"] = text
        # record["messages"]=text
        if text == "":
            continue

        record.pop("conversations")

        with open(out_path, "a") as f:
            f.write(json.dumps(record, ensure_ascii=False) + "\n")
